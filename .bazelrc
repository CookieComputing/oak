# Bazel defaults.

# Build C++ targets using C++20.
# <https://stackoverflow.com/questions/40260242/how-to-set-c-standard-version-when-build-with-bazel>
common --cxxopt=-std=c++20

# Fix Abseil "C++ versions less than C++14 are not supported".
# <https://github.com/protocolbuffers/protobuf/issues/12393#issuecomment-1504349780>
common --host_cxxopt=-std=c++20

# Use nightly rustc by default
common --@rules_rust//rust/toolchain/channel=nightly

# Use a custom workspace status command so that the git revision is included in
# stamped binaries.
common --workspace_status_command=bazel/workspace_status_command.sh

# Prevents repeated setup-teardown of sandboxes for targets that are frequently
# reused. This speeds up builds significantly in some cases, like when using a
# toolchain with a hermetic sysroot, like we do.
# See: https://github.com/bazelbuild/bazel/issues/16138
# For a good summary of potential issues, ask Gemini a question like:
# "Is there any reason I shouldn't enable --reuse_sandbox_directories" by default?
common --reuse_sandbox_directories

# Set the rustc --sysroot flag to one generated by the toolchains. This is needed to support
# rebuilding the standard libraries for stage 0 and the restricted kernel wrapper.
common --@rules_rust//rust/settings:toolchain_generated_sysroot=True

# By default, rules_rust tries to make a lot of LTO flag decisions for you.
# We have some nuanced requirements, so we set this flag to retain full
# control. (See: https://github.com/bazelbuild/rules_rust/pull/3120)
common --@rules_rust//rust/settings:lto=manual

# Setup clippy aspect to run clippy automatically on all rust targets
# See: https://bazelbuild.github.io/rules_rust/rust_clippy.html
build:clippy --aspects=@rules_rust//rust:defs.bzl%rust_clippy_aspect
build:clippy --output_groups=+clippy_checks

# Setup rustfmt aspect to run automatically on all rust targets
# https://bazelbuild.github.io/rules_rust/rust_fmt.html
build:rustfmt --aspects=@rules_rust//rust:defs.bzl%rustfmt_aspect
build:rustfmt --output_groups=+rustfmt_checks
build:rustfmt --@rules_rust//:rustfmt.toml=//:.rustfmt.toml

# Required for bazel_clang_tidy to operate as expected
build:clang-tidy --aspects @bazel_clang_tidy//clang_tidy:clang_tidy.bzl%clang_tidy_aspect
build:clang-tidy --output_groups=report

# Optionally override the .clang-tidy config file target
build:clang-tidy --@bazel_clang_tidy//:clang_tidy_config=//:clang_tidy_config

# Always use optimization.
build:release --compilation_mode opt

# Strip debug information from linked results.
build:release --linkopt=-Wl,--strip-all

build:debug --compilation_mode dbg
build:debug --strip never

# Many of these flags were discovered by looking for `build:asan` examples internally.
build:asan --strip=never
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER=1
build:asan --copt -O1
build:asan --copt -g3
build:asan --copt -fno-optimize-sibling-calls
build:asan --copt -fno-omit-frame-pointer
build:asan --compilation_mode=dbg
build:asan --linkopt -fsanitize=address
# The other options trigger a maybe-uninitialized error when compiling protobuf; this prevents it.
build:asan --copt -Wno-error=maybe-uninitialized
# The flags improve symbolication and rust stack trace expansion
build:asan --@rules_rust//rust/settings:extra_rustc_flag=-Zsanitizer=address
build:asan --@rules_rust//rust/settings:extra_rustc_flag=-Cdebuginfo=full
build:asan --@rules_rust//rust/settings:extra_rustc_flag=-Ccodegen-units=1
build:asan --@rules_rust//rust/settings:extra_rustc_flag=-Clink-dead-code
build:asan --@rules_rust//rust/settings:extra_rustc_flag=-Cpasses=sancov-module
build:asan --@rules_rust//rust/settings:extra_rustc_flag=-Cllvm-args=-sanitizer-coverage-level=4
build:asan --@rules_rust//rust/settings:extra_rustc_flag=-Cllvm-args=-sanitizer-coverage-pc-table
build:asan --@rules_rust//rust/settings:extra_rustc_flag=-Cllvm-args=-sanitizer-coverage-inline-8bit-counters
build:asan --@rules_rust//rust/settings:extra_rustc_flag=-Cllvm-args=-sanitizer-coverage-trace-compares
build:asan --@rules_rust//rust/settings:extra_rustc_flag=-Cllvm-args=-sanitizer-coverage-stack-depth

# Use a custom local bazelrc if present.
#
# To set up remote cache write credentials:
# - navigate to https://pantheon.corp.google.com/iam-admin/serviceaccounts?project=oak-ci
# - click on "Create Service Account"
#   + use your @google.com username as the service account name (e.g. "tzn")
#   + leave the service account ID as is (e.g. "tzn-110")
#   + leave the service account description empty
# - grant the "Storage Object Admin" role to the newly created account
# - click on "Create Key", then select "JSON"
# - save the generated key as the file referenced below, within the project directory
#   + make sure to not check it in to git, check your `.gitignore` configuration
# - create a .local.bazelrc file in the repo root containing the following:
#
# ```
# build:unsafe-fast-presubmit --google_credentials=./.oak_remote_cache_key.json
# build:unsafe-fast-presubmit --remote_upload_local_results=true
# ```
try-import ./.local.bazelrc

import ./.ci.bazelrc
try-import ./.tmp.ci.bazelrc
