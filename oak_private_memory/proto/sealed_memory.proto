//
// Copyright 2025 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Private memory service definition: A memory consists of a datablob content
// and one or more tags. The service allows users to add a tagged memory and get
// the memories by tags.

syntax = "proto3";

package oak.private_memory;

import "proto/session/session.proto";

message Memory {
  string id = 1;
  bytes content = 2;
  repeated string tags = 3;
}

message AddMemoryRequest {
  Memory memory = 1;
}

message AddMemoryResponse {
  string id = 1;
}

message GetMemoriesRequest {
  string tag = 1;
}

message GetMemoriesResponse {
  repeated Memory memories = 1;
}

message ResetMemoryRequest {}

message ResetMemoryResponse {
  bool success = 1;
  string error_message = 2;
}

// This is used to indicate that the request is invalid.
message InvalidRequestResponse {
  string error_message = 1;
}

message SealedMemoryRequest {
  oneof request {
    AddMemoryRequest add_memory_request = 1;
    GetMemoriesRequest get_memories_request = 2;
    ResetMemoryRequest reset_memory_request = 3;
    // ...
  }
}

message SealedMemoryResponse {
  oneof response {
    AddMemoryResponse add_memory_response = 1;
    GetMemoriesResponse get_memories_response = 2;
    ResetMemoryResponse reset_memory_response = 3;
    InvalidRequestResponse invalid_request_response = 4;
    // ...
  }
}

service SealedMemoryService {
  // Unary method for encrypted communication between the client and the TEE.
  rpc Invoke(stream oak.session.v1.SessionRequest)
      returns (stream oak.session.v1.SessionResponse) {}
}
