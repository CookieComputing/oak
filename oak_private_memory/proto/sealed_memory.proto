//
// Copyright 2025 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Private memory service definition: A memory consists of a datablob content
// and one or more tags. The service allows users to add a tagged memory and get
// the memories by tags.

syntax = "proto3";

package oak.private_memory;

import "proto/session/session.proto";

message Embedding {
  string model_signature = 1;
  repeated float values = 2;
}

message Memory {
  string id = 1;
  bytes content = 2;
  repeated string tags = 3;
  repeated Embedding embeddings = 4;
}

message AddMemoryRequest {
  Memory memory = 1;
}

message AddMemoryResponse {
  string id = 1;
}

message GetMemoriesRequest {
  string tag = 1;
}

message GetMemoriesResponse {
  repeated Memory memories = 1;
}

message ResetMemoryRequest {}

message ResetMemoryResponse {
  bool success = 1;
  string error_message = 2;
}

// This is used to indicate that the request is invalid.
message InvalidRequestResponse {
  string error_message = 1;
}

message KeySyncRequest {
  // The key should be a byte string of size 32 bytes (256 bits).
  bytes key_encryption_key = 1;

  // The ID of the user. Currently it has one to one mapping to the database.
  // That is, each id has a unique database.
  string pm_uid = 2;
}

message KeySyncResponse {
  enum Status {
    // Default status, should ideally not be sent by the server. Client can
    // treat this as an error if received.
    UNSPECIFIED = 0;
    SUCCESS = 1;
    // The key is incorrect (e.g., derived using wrong algorithm or wrong salt).
    // The clients should derive the key again with the correct information
    // (e.g., make sure they use the stored key derivation info from the
    // server).
    INVALID_KEY = 3;
    // The pm_uid doesn't exist. The users should try to register themselves
    // first
    INVALID_PM_UID = 4;
  }
  Status status = 1;
}

message GetMemoryByIdRequest {
  string id = 1;
}

message GetMemoryByIdResponse {
  // If the memory is found, the success field is true. Otherwise, the success
  // field is false and the memory field is empty.
  bool success = 1;
  Memory memory = 2;
}

message SearchMemoryRequest {
  // If set, the server will return at most `limit` memories.
  uint32 limit = 1;
  repeated Embedding embedding_query = 2;
}

message SearchResult {
  Memory memory = 1;
  float score = 2;
}

message SearchMemoryResponse {
  repeated SearchResult results = 1;
}

message KeyDerivationInfo {
  bytes kek_salt = 1;     // Salt used for KEK derivation.
  int32 kek_version = 2;  // Version of the KEK derivation method or key.
}

message BootStrapRequest {
  string pm_uid = 1;
  bytes key_encryption_key = 2;

  KeyDerivationInfo boot_strap_info = 3;
}

message BootStrapResponse {
  enum Status {
    // Default status, should ideally not be sent by the server. Client can
    // treat this as an error if received.
    UNSPECIFIED = 0;

    // Successful bootstrap! The user can skip the key sync and directly send
    // memory related requests.
    SUCCESS = 1;

    // If the user has been registered, server will return the saved
    // KeyDerivationInfo with this error. Clients should rederive the key with
    // the return information.
    USER_ALREADY_EXISTS = 3;
  }
  Status status = 1;

  // Set when status is `USER_ALREADY_EXISTS`
  KeyDerivationInfo key_derivation_info = 2;
}

message SealedMemoryRequest {
  oneof request {
    AddMemoryRequest add_memory_request = 1;
    GetMemoriesRequest get_memories_request = 2;
    ResetMemoryRequest reset_memory_request = 3;
    // Reserved 4 so the request and response have the same field numbers.
    GetMemoryByIdRequest get_memory_by_id_request = 5;

    KeySyncRequest key_sync_request = 6;
    SearchMemoryRequest search_memory_request = 7;
    BootStrapRequest boot_strap_request = 8;
  }

  // Optional unique identifier for this request within the session.
  // It is set by the clients.
  int32 request_id = 50;
}

message SealedMemoryResponse {
  oneof response {
    AddMemoryResponse add_memory_response = 1;
    GetMemoriesResponse get_memories_response = 2;
    ResetMemoryResponse reset_memory_response = 3;
    InvalidRequestResponse invalid_request_response = 4;
    GetMemoryByIdResponse get_memory_by_id_response = 5;

    KeySyncResponse key_sync_response = 6;
    SearchMemoryResponse search_memory_response = 7;
    BootStrapResponse boot_strap_response = 8;
  }

  // Propagated from the request_id from the request.
  int32 request_id = 50;
}

service SealedMemoryService {
  // Unary method for encrypted communication between the client and the TEE.
  rpc Invoke(stream oak.session.v1.SessionRequest)
      returns (stream oak.session.v1.SessionResponse) {}
}
