// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost_derive::Message)]
pub struct LookupRequest {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub keys: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(enumeration = "lookup_request::Mode", tag = "2")]
    pub mode: i32,
}
/// Nested message and enum types in `LookupRequest`.
pub mod lookup_request {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost_derive::Enumeration
    )]
    #[repr(i32)]
    pub enum Mode {
        Individual = 0,
        Batch = 1,
    }
    impl Mode {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Individual => "INDIVIDUAL",
                Self::Batch => "BATCH",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "INDIVIDUAL" => Some(Self::Individual),
                "BATCH" => Some(Self::Batch),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost_derive::Message)]
pub struct LookupResponse {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
/// Echo the bytes back, and then panic.
#[derive(Clone, PartialEq, ::prost_derive::Message)]
pub struct EchoAndPanicRequest {
    #[prost(bytes = "vec", tag = "5")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost_derive::Message)]
pub struct EchoAndPanicResponse {
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
